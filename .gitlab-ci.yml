# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  
  - build
  - deploy_dev
  - test
  
 
  - sonarqube-check
  - dependencycheck
  
  - release
  - deploy_pre
  - deploy_prod
  #- security_scan

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  archivo_json1: "$CI_PROJECT_NAME/appsettings.json"
  VERSIONS: (jq -r '.Version' "$archivo_json1")




before_script:
- echo "Setting up...."
build:
  stage: build
  script:
    - docker --version
    - archivo_json="$CI_PROJECT_NAME/appsettings.json"
    - apk add --update jq 
    - VERSION=$(jq -r '.Version' "$archivo_json")
    - tag_name="v$VERSION"
    - echo "$VERSION"
    - echo "Building the project..."
    - BRANCH_NAME=$(echo $CI_COMMIT_REF_NAME | tr '[:upper:]' '[:lower:]')
    - DOCKER_TAG="$DOCKERHUB_USERNAME/$REPOSITORY:$CI_PROJECT_NAME-$VERSION"
    - docker build -t "$DOCKER_TAG" -f $CI_PROJECT_NAME/Dockerfile .
  only:
  - dev
  tags:
    - docker

dependencycheck:
    stage: dependencycheck
    image:
        name: owasp/dependency-check
        entrypoint: [""]
    script:
       - /usr/share/dependency-check/bin/dependency-check.sh --project "Test" --out . --scan . --enableExperimental --failOnCVSS 10 --nvdApiKey "ebc05a84-5668-4dd1-959f-4bad02725714" -l dependency-check.log --format HTML

    only:
    - dev
    tags:
    - docker


sonarqube-check:
  stage: sonarqube-check
  image: cristhiansanchezal/mi-imagen-docker:mi-tag
  #image: mcr.microsoft.com/dotnet/sdk:6.0 #tudockerimage:latest 
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: '0'
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache

    paths:
      - .sonar/cache
  script: 
    - echo "Running tests..."
    #- "apt-get install --yes --no-install-recommends openjdk-17-jre"
    - "java -version || (apt-get update && apt-get install --yes --no-install-recommends openjdk-17-jre)"  
    - "export PATH=\"$PATH:$HOME/.dotnet/tools\""
    - "dotnet sonarscanner begin /k:\"$CI_PROJECT_NAME\" /d:sonar.token=\"$SONAR_TOKEN\" /d:\"sonar.host.url=$SONAR_HOST_URL\" "
    - "dotnet build"
    - "dotnet sonarscanner end /d:sonar.token=\"$SONAR_TOKEN\""
    
   # /d:sonar.qualitygate.wait=true
  only:
  - dev
  tags:
  - docker
test:
  stage: test
  script:
    - echo "Running tests.s.."
    #- ls -al 
    - echo "Running tests..."
    - docker build -t my-test-image --build-arg DB_NAME=GWSYSREY_MIGRACION --build-arg DB_PASS=david9393 --build-arg DB_PORT=1433 --build-arg DB_SERVER=jdbc:10.35.03.11\\SQLEXPRESS --build-arg DB_USER=dramirez --build-arg SQL_CONNECTION_STRING="Data Source={Host},{Port}; Initial Catalog={NameDb}; User Id={UserDb}; Password={PassDb}; TrustServerCertificate=True" -f $CI_PROJECT_NAME-test/Dockerfile .

    #- docker build -t my-test-image -f $CI_PROJECT_NAME-test/Dockerfile .
    - docker run --rm my-test-image
  only:
  - dev
  tags:
  - docker
  allow_failure: false
deploy_dev:
  stage: deploy_dev
  script:
  - echo "Deploying to production..-."
  - archivo_json="$CI_PROJECT_NAME/appsettings.json"
  - apk add --update jq
  - VERSION=$(jq -r '.Version' "$archivo_json")
  - PORT=$(jq -r '.Port' "$archivo_json")
  - BRANCH_NAME=$(echo $CI_COMMIT_REF_NAME | tr '[:upper:]' '[:lower:]')
  - DOCKER_TAG="$DOCKERHUB_USERNAME/$REPOSITORY:$CI_PROJECT_NAME-$VERSION"
  - CONTAINER_NAME="$CI_PROJECT_NAME-$VERSION-dev"
  - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
  - docker push "$DOCKER_TAG"
  - apk add --update sshpass
  - if [ ! -x "$(command -v ssh-agent)" ]; then apk add --update openssh; fi
  - eval $(ssh-agent -s)
  - mkdir -p "$HOME/.ssh"
  - touch "$HOME/.ssh/known_hosts"
  - chmod 644 "$HOME/.ssh/known_hosts"
  - ssh-keyscan -H "$SERVER_IP" >> "$HOME/.ssh/known_hosts"
  #- echo "$DOCKERHUB_PASSWORD" | sshpass -p "$SERVER_PASSWORD" ssh $SERVER_USER@$SERVER_IP
  #  "docker login -u $DOCKERHUB_USERNAME --password-stdin"
  - sshpass -p "$SERVER_PASSWORD" ssh $SERVER_USER@$SERVER_IP "docker pull $DOCKER_TAG"
  - CONTAINER_ID=$(sshpass -p $SERVER_PASSWORD ssh $SERVER_USER@$SERVER_IP "docker
    ps -q -f \"name=$CONTAINER_NAME\"")
  - |
    if [ -n "$CONTAINER_ID" ]; then
     echo "$CONTAINER_NAME"
     sshpass -p $SERVER_PASSWORD ssh $SERVER_USER@$SERVER_IP "docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME"
    else
      echo "El contenedor no existe, no se requiere detenerlo."
    fi
  - CONTAINER_ID_PUERTO=$(sshpass -p $SERVER_PASSWORD ssh $SERVER_USER@$SERVER_IP
    "docker ps -q --filter "publish=$PORT"")
  - |
    if [ -n "$CONTAINER_ID_PUERTO" ]; then
     echo "$CONTAINER_ID_PUERTO"
     sshpass -p $SERVER_PASSWORD ssh $SERVER_USER@$SERVER_IP "docker stop $CONTAINER_ID_PUERTO && docker rm $CONTAINER_ID_PUERTO"
    else
      echo "El contenedor no existe, no se requiere detenerlo."
    fi
  - sshpass -p "$SERVER_PASSWORD" ssh $SERVER_USER@$SERVER_IP "docker run -d --name $CONTAINER_NAME -p $PORT:80 -e DB_NAME=GWSYSREY_MIGRACION -e DB_PASS=david9393 -e DB_PORT=1433 -e DB_SERVER=10.35.03.11\\SQLEXPRESS -e DB_USER=dramirez -e URL_KEY_DB=http://10.35.3.175:8308/api/us/integracion-seguridad/iguana/keys -e AMBIENTE=DEV -e SQL_CONNECTION_STRING=\"Data Source={Host},{Port}; Initial Catalog={NameDb}; User Id={UserDb}; Password={PassDb}; TrustServerCertificate=True\" $DOCKER_TAG"


 # - sshpass -p "$SERVER_PASSWORD" ssh $SERVER_USER@$SERVER_IP "docker run -d --name
 #   $CONTAINER_NAME -p $PORT:80 $DOCKER_TAG"
  environment:
    name: production
    url: https://example.com
  only:
  - dev
  tags:
    - docker

deploy_pre:
  stage: deploy_pre
  script:
  - echo "Deploying to production...-."
  - archivo_json="$CI_PROJECT_NAME/appsettings.json"
  - apk add --update jq
  - VERSION=$(jq -r '.Version' "$archivo_json")
  - PORT=$(jq -r '.Port' "$archivo_json")
  - BRANCH_NAME=$(echo $CI_COMMIT_REF_NAME | tr '[:upper:]' '[:lower:]')
  - DOCKER_TAG="$DOCKERHUB_USERNAME/$REPOSITORY:$CI_PROJECT_NAME-$VERSION"
  - CONTAINER_NAME="$CI_PROJECT_NAME-$VERSION-pre"
  - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
 # - docker push "$DOCKER_TAG"
  - apk add --update sshpass
  - if [ ! -x "$(command -v ssh-agent)" ]; then apk add --update openssh; fi
  - eval $(ssh-agent -s)
  - mkdir -p "$HOME/.ssh"
  - touch "$HOME/.ssh/known_hosts"
  - chmod 644 "$HOME/.ssh/known_hosts"
  - ssh-keyscan -H "$SERVER_IP" >> "$HOME/.ssh/known_hosts"
  - echo "$DOCKERHUB_PASSWORD" | sshpass -p "$SERVER_PASSWORD" ssh $SERVER_USER@$SERVER_IP
    "docker login -u $DOCKERHUB_USERNAME --password-stdin"
  - sshpass -p "$SERVER_PASSWORD" ssh $SERVER_USER@$SERVER_IP "docker pull $DOCKER_TAG"
  - CONTAINER_ID=$(sshpass -p $SERVER_PASSWORD ssh $SERVER_USER@$SERVER_IP "docker
    ps -q -f \"name=$CONTAINER_NAME\"")
  - |
    if [ -n "$CONTAINER_ID" ]; then
     echo "$CONTAINER_NAME"
     sshpass -p $SERVER_PASSWORD ssh $SERVER_USER@$SERVER_IP "docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME"
    else
      echo "El contenedor no existe, no se requiere detenerlo."
    fi
  - CONTAINER_ID_PUERTO=$(sshpass -p $SERVER_PASSWORD ssh $SERVER_USER@$SERVER_IP
    "docker ps -q --filter "publish=6000"")
  - |
    if [ -n "$CONTAINER_ID_PUERTO" ]; then
     echo "$CONTAINER_ID_PUERTO"
     sshpass -p $SERVER_PASSWORD ssh $SERVER_USER@$SERVER_IP "docker stop $CONTAINER_ID_PUERTO && docker rm $CONTAINER_ID_PUERTO"
    else
      echo "El contenedor no existe, no se requiere detenerlo."
    fi
  - sshpass -p "$SERVER_PASSWORD" ssh $SERVER_USER@$SERVER_IP "docker run -d --name
    $CONTAINER_NAME -p 6000:80 $DOCKER_TAG"
  only:
    - master
 

deploy_prod:
  stage: deploy_prod
  script:
  - echo "Deploying to production...-."
  - archivo_json="$CI_PROJECT_NAME/appsettings.json"
  - apk add --update jq
  - VERSION=$(jq -r '.Version' "$archivo_json")
  - BRANCH_NAME=$(echo $CI_COMMIT_REF_NAME | tr '[:upper:]' '[:lower:]')
  - DOCKER_TAG="$DOCKERHUB_USERNAME/$REPOSITORY:$CI_PROJECT_NAME-$VERSION"
  - CONTAINER_NAME="$CI_PROJECT_NAME-$VERSION-prod"
  - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
 # - docker push "$DOCKER_TAG"
  - apk add --update sshpass
  - if [ ! -x "$(command -v ssh-agent)" ]; then apk add --update openssh; fi
  - eval $(ssh-agent -s)
  - mkdir -p "$HOME/.ssh"
  - touch "$HOME/.ssh/known_hosts"
  - chmod 644 "$HOME/.ssh/known_hosts"
  - ssh-keyscan -H "$SERVER_IP" >> "$HOME/.ssh/known_hosts"
  - echo "$DOCKERHUB_PASSWORD" | sshpass -p "$SERVER_PASSWORD" ssh $SERVER_USER@$SERVER_IP
    "docker login -u $DOCKERHUB_USERNAME --password-stdin"
  - sshpass -p "$SERVER_PASSWORD" ssh $SERVER_USER@$SERVER_IP "docker pull $DOCKER_TAG"
  - CONTAINER_ID=$(sshpass -p $SERVER_PASSWORD ssh $SERVER_USER@$SERVER_IP "docker
    ps -q -f \"name=$CONTAINER_NAME\"")
  - |
    if [ -n "$CONTAINER_ID" ]; then
     echo "$CONTAINER_NAME"
     sshpass -p $SERVER_PASSWORD ssh $SERVER_USER@$SERVER_IP "docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME"
    else
      echo "El contenedor no existe, no se requiere detenerlo."
    fi
  - CONTAINER_ID_PUERTO=$(sshpass -p $SERVER_PASSWORD ssh $SERVER_USER@$SERVER_IP
    "docker ps -q --filter "publish=8099"")
  - |
    if [ -n "$CONTAINER_ID_PUERTO" ]; then
     echo "$CONTAINER_ID_PUERTO"
     sshpass -p $SERVER_PASSWORD ssh $SERVER_USER@$SERVER_IP "docker stop $CONTAINER_ID_PUERTO && docker rm $CONTAINER_ID_PUERTO"
    else
      echo "El contenedor no existe, no se requiere detenerlo."
    fi
  - sshpass -p "$SERVER_PASSWORD" ssh $SERVER_USER@$SERVER_IP "docker run -d --name
    $CONTAINER_NAME -p 8099:80 $DOCKER_TAG"
  only:
    - master
  when: manual

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  #rules:
  #  - if: $CI_COMMIT_TAG
  #    when: never                                  # No ejecutar este trabajo cuando se crea una etiqueta manualmente
  #  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Ejecutar este trabajo cuando se hacen commits o se fusionan en la rama predeterminada
    
  before_script:
    - archivo_json="$CI_PROJECT_NAME/appsettings.json"
    - apk add --update jq 
    - VERSION=$(jq -r '.Version' "$archivo_json")
   # - VERSIONS="$VERSION"
     
  script:
    
    - echo "runnings release_job for $TAG"
    - echo "$VERSION" 
    - release-cli create --description "v${VERSION}" --tag-name "v${VERSION}" --ref "$CI_COMMIT_SHA"

  tags:
    - docker
  only:
    - dev